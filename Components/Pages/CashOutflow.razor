
@page "/cashoutflow"
@inject HttpClient Http

@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="d-flex justify-content-center">
        <div class="card shadow-lg" style="width: 100%; max-width: 500px;">
            <div class="card-header bg-primary text-white text-center">
                <h3 class="mb-0">Cash Outflow</h3>
            </div>
            <div class="card-body p-4">
                <form @onsubmit="HandleSubmit">
                    <!-- Recipient Name -->
                    <div class="mb-4">
                        <label for="recipientName" class="form-label">Recipient Name</label>
                        <input type="text" id="recipientName" class="form-control form-control-lg"
                               placeholder="Enter recipient name" @bind="RecipientName" />
                    </div>

                    <!-- Description -->
                    <div class="mb-4">
                        <label for="description" class="form-label">Description</label>
                        <textarea id="description" class="form-control form-control-lg" rows="3"
                                  placeholder="Enter description" @bind="Description"></textarea>
                    </div>

                    <!-- Category Dropdown -->
                    <div class="mb-4">
                        <label for="category" class="form-label">Category</label>
                        <select id="category" class="form-select form-select-lg" @bind="Category">
                            <option value="" disabled selected>-- Select Category --</option>
                            <option value="rent">Rent</option>
                            <option value="grocery">Grocery</option>
                            <option value="gadgets">Gadgets</option>
                            <option value="purchase">Purchase</option>
                        </select>
                    </div>

                    <!-- Money Dropdown -->
                    <div class="mb-4">
                        <label for="amount" class="form-label">Amount</label>
                        <select id="amount" class="form-select form-select-lg" @bind="Amount">
                            <option value="0" disabled selected>-- Select Amount --</option>
                            @for (int i = 1000; i <= 100000; i += 1000)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>

                    <!-- Validation Message -->
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="alert alert-danger text-center" role="alert">
                            @ValidationMessage
                        </div>
                    }

                    <!-- Success Message -->
                    @if (TransactionSuccess)
                    {
                        <div class="alert alert-success text-center" role="alert">
                            Transaction Successful! Redirecting...
                        </div>
                    }

                    <!-- Submit Button -->
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg">Send Money</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    private string RecipientName { get; set; } = string.Empty;
    private string Description { get; set; } = string.Empty;
    private string Category { get; set; } = string.Empty;
    private int Amount { get; set; } = 0;

    private string ValidationMessage { get; set; } = string.Empty;
    private bool TransactionSuccess { get; set; } = false;

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(RecipientName) ||
            string.IsNullOrEmpty(Description) ||
            string.IsNullOrEmpty(Category) ||
            Amount == 0)
        {
            ValidationMessage = "Please fill up the form completely before sending money.";
            TransactionSuccess = false;
        }
        else
        {
            ValidationMessage = string.Empty;

            var request = new
            {
                RecipientName,
                Description,
                Category,
                Amount
            };

            try
            {
                var response = await Http.PostAsJsonAsync("api/Transactions/cashoutflow", request);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<dynamic>();
                    TransactionSuccess = result?.Success ?? false;

                    // Simulate receipt generation and redirection
                    if (TransactionSuccess)
                    {
                        await Task.Delay(2000); // Simulate processing delay
                        Navigation.NavigateTo("/cashinflow");
                    }
                }
                else
                {
                    ValidationMessage = "Failed to process the transaction. Try again later.";
                    TransactionSuccess = false;
                }
            }
            catch (Exception ex)
            {
                ValidationMessage = $"Error: {ex.Message}";
                TransactionSuccess = false;
            }
        }
    }
}